rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helpers ---
    function signedIn() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return signedIn() && request.auth.uid == uid;
    }

    function isAdmin() {
      return signedIn() &&
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }

    // --- ADMIN SETTINGS ---
    match /admin_settings/{setting} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // --- GLOBAL LOYALTY SETTINGS ---
    match /settings/{docId} {
        allow read: if true; // All users can read settings
        allow write: if isAdmin(); // Only admins can change them
    }

    // --- USERS ---
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      // Users can update their own doc, but cannot make themselves admin or change their loyalty status.
      allow update: if (isOwner(userId) &&
                      request.resource.data.isAdmin == resource.data.isAdmin &&
                      request.resource.data.loyalty == resource.data.loyalty)
                   || isAdmin();
      allow create: if isOwner(userId) && (!('isAdmin' in request.resource.data) || request.resource.data.isAdmin == false);
    }

    // --- COMPETITIONS & SPINNER COMPS ---
    // This simple rule is safest: only admins can create, update, or delete competitions.
    // All client interaction (like buying tickets) goes through Cloud Functions.
    match /competitions/{compId} {
      allow list, get: if true;
      allow write: if isAdmin();
    }

    match /spinner_competitions/{compId} {
      allow list, get: if true;
      allow write: if isAdmin();
    }

    // --- ENTRIES (Recursive rule for all entry subcollections) ---
    match /{path=**}/entries/{entryId} {
      // Allows collectionGroup queries from the client, which are then filtered by UID in the code.
      allow list: if signedIn();

      // Allows reading a single entry if you are the owner or an admin.
      allow get: if isAdmin() || (signedIn() && request.auth.uid == resource.data.userId);

      // All writes (new entries) MUST go through verified Cloud Functions.
      allow create, update, delete: if false;
    }

    // --- AUDIT LOGS (Write-only for backend, read-only for admin) ---
    match /audits/{auditId} {
        allow read: if isAdmin();
        // This denies all client-side writes. Audits must be created by Cloud Functions.
        allow write: if false;
    }

    // --- SERVER-ONLY & PUBLIC COLLECTIONS ---
    match /spin_wins/{winId} { allow read, write: if false; }
    match /pastWinners/{winnerId} { allow read: if true; allow write: if false; }
  }
}
